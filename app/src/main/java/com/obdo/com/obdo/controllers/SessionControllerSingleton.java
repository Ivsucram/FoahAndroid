package com.obdo.com.obdo.controllers;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.telephony.SmsManager;
import android.telephony.SmsMessage;
import android.util.Log;

import com.obdo.com.obdo.com.obdo.exceptions.NullNicknameException;
import com.obdo.com.obdo.com.obdo.exceptions.NullPhoneNumberException;
import com.obdo.com.obdo.com.obdo.exceptions.NullSMSException;
import com.obdo.com.obdo.com.obdo.exceptions.NullUIDException;

import java.util.Objects;

/**
 * Singleton Controller that takes care of User Session as well as registration, login and logout.
 * @author Marcus Vinícius de Carvalho
 * @since 12/10/2014
 * @version 1.0
 * @see com.obdo.com.obdo.controllers.HTTPRequestController
  */
public class SessionControllerSingleton {
    /**
     * Static singleton controller
     * @since 12/12/2014
     */
    private static SessionControllerSingleton instance = null;
    /**
     * User phone number
     * @since 12/12/2014
     */
    private String phoneNumber;
    /**
     * Cellphone Universal Identification
     * @since 12/12/2014
     */
    private String uid;
    /**
     * User nickname
     * @since 12/12/2014
     */
    private String nick;
    private boolean smsCheck = false;

    public SessionControllerSingleton() {}

    /**
     * @return the same instance of the current object every time
     * @since 12/12/2014
     */
    public static SessionControllerSingleton getInstance() {
        if(instance == null)
            instance = new SessionControllerSingleton();
        return instance;
    }

    /**
     * Check if user exists based on provided phonenumber and UID
     * @return if user exists
     * @throws NullPhoneNumberException if phonenumber is empty or null
     * @throws NullUIDException if UID is empty or null
     * @since 12/12/2014
     */
    public boolean checkUserExists() throws NullPhoneNumberException, NullUIDException {
        if (phoneNumber == null || phoneNumber.isEmpty()) throw new NullPhoneNumberException();
        if (uid == null || uid.isEmpty()) throw new NullUIDException();
        HTTPRequestController httpRequestController = new HTTPRequestController();
        //TODO: return httpRequestController.checkUserExists(phoneNumber,uid);
        return true;
    }

    /**
     * Register user with its phonenumber and UID
     * @return if the registration was completed with success
     * @throws NullPhoneNumberException if phonenumber is empty or null
     * @throws NullUIDException if UID is empty or null
     * @since 12/12/2014
     */
    public boolean registerUser() throws NullPhoneNumberException, NullUIDException {
        if (phoneNumber == null || phoneNumber.isEmpty()) throw new NullPhoneNumberException();
        if (uid == null || uid.isEmpty()) throw new NullUIDException();
        HTTPRequestController httpRequestController = new HTTPRequestController();
        //TODO: return httpRequestController.registerUser(phoneNumber,uid);
        return true;
    }

    /**
     * Login user with its phonenumber and UID
     * @return if the login procedure was completed with success
     * @throws NullPhoneNumberException if phonenumber is empty or null
     * @throws NullUIDException if UID is empty or null
     * @since 12/12/2014
     */
    public boolean loginUser() throws NullPhoneNumberException, NullUIDException {
        if (phoneNumber == null || phoneNumber.isEmpty()) throw new NullPhoneNumberException();
        if (uid == null || uid.isEmpty()) throw new NullUIDException();
        HTTPRequestController httpRequestController = new HTTPRequestController();
        //TODO: return httpRequestController.loginUser(phoneNumber,uid);
        return true;
    }

    /**
     * Updates user nickname with its phonenumber, UID and new nickname
     * @return if the update procedure was completed with success
     * @throws NullPhoneNumberException if phonenumber is empty or null
     * @throws NullUIDException if UID is empty or null
     * @throws NullNicknameException if user nickname is empty or null
     * @since 12/12/2014
     */
    public boolean updateNickUser() throws NullPhoneNumberException, NullUIDException, NullNicknameException {
        if (phoneNumber == null || phoneNumber.isEmpty()) throw new NullPhoneNumberException();
        if (uid == null || uid.isEmpty()) throw new NullUIDException();
        if (nick == null || nick.isEmpty()) throw new NullNicknameException();
        HTTPRequestController httpRequestController = new HTTPRequestController();
        //TODO: return httpRequestController.updateNickUser(phoneNumber,uid,nick);
        return true;
    }

    /**
     * Check if the received SMS at the cellphone is the same that the was generated by the server for this user
     * @param sms message received by SMS/PDU to be tested with server
     * @return if SMS is equal or not
     * * @throws NullSMSException if there is no SMS code from the server
     * @since 12/12/2014
     */
    public boolean checkSMS(String sms) throws NullSMSException {
        if (sms == null || sms.isEmpty()) throw new NullSMSException();
        HTTPRequestController httpRequestController = new HTTPRequestController();
        //TODO: smsCheck = httpRequestController.checkSMS(phoneNumber,uid,sms);
        return smsCheck;
    }

    //TODO: javadoc
    public void createSMSBroadcastReceiver(Context context, Intent intent) {
        IncomingSMS incomingSMS = new IncomingSMS();
        incomingSMS.onReceive(context, intent);
    }

    /**
     * Setter for phoneNumber
     * @param phoneNumber User Phone number
     * @since 12/12/2014
     */
    public void setPhoneNumber(String phoneNumber) {
        if (phoneNumber != null && !phoneNumber.isEmpty() && phoneNumber.charAt(0)!='+')
            phoneNumber = "+"+phoneNumber;
        this.phoneNumber = phoneNumber;
    }

    /**
     * Setter for uid
     * @param uid Cellphone UID
     * @since 12/12/2014
     */
    public void setUID(String uid) {
        this.uid = uid;
    }

    /**
     * Setter for nick
     * @param nick User nickname
     * @since 12/12/2014
     */
    public void setNick(String nick) {
        this.nick = nick;
    }

    public boolean isSmsCheck() {
        return smsCheck;
    }
}

/**
 * Class that takes care of SMS event broadcastesd (when new SMS receveid)
 * @author Marcus Vinícius de Carvalho
 * @since 12/10/2014
 * @version 1.0
 * @see com.obdo.com.obdo.controllers.SessionControllerSingleton
 */
class IncomingSMS extends BroadcastReceiver {
    final SmsManager sms = SmsManager.getDefault();

    public void onReceive(Context context, Intent intent) {
        final Bundle bundle = intent.getExtras();

        try {
            if (bundle != null) {
                final Object[] pdusObjects = (Objects[]) bundle.get("pdus");

                for (int i = 0; i < pdusObjects.length; i++) {
                    SmsMessage currentMessage = SmsMessage.createFromPdu((byte[]) pdusObjects[i]);
                    String senderNumber = currentMessage.getDisplayOriginatingAddress();
                    String message = currentMessage.getDisplayMessageBody();

                    //TODO: put real obdoNumber
                    if (senderNumber == "obdoNumber") {
                        SessionControllerSingleton sessionControllerSingleton = SessionControllerSingleton.getInstance();
                        sessionControllerSingleton.checkSMS(message);
                    }
                }
            }
        } catch (Exception e) {
            Log.e("SmsReceiver", "Exception smsReceiver" + e);
        }

    }
}
